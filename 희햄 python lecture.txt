희햄 파이썬 강의 필기

-powershell 명령어 : code . = vscode실행해라 + 현재 폴더에서

-print()함수 안에 숫자는 따옴표 없이 사용 가능
-print()함수 안에 따옴표 두 개 사용하고 싶을 때
	1."  ''   "
	2.'  ""   '
	3.'  \'  \'  '
	4."  \"  \"  "


-변수이름 = 값   즉,변수이름은 박스고 값은 넣은 내용
 ex)name = '효경'
     print(name) [=print("효경")]
     효경
-name = "효경"...효경
 name = "혜윤"...혜윤
 name = name + "효경"...혜윤 효경
-복잡한 계산하기 =?>변수에 넣기
 ex)result = 복잡한 계산
 ex1)part1 = 복잡한 계산, part2 = 복잡한 계산,, result = part1 + part2
-----변수는 중간 과정을 계산할 때 많이 사용된다.
-----변수는 큰 데이터를 나눠서 저장할 때에도 유용하다.
-----변수에는 어떤 값이든 저장 할 수 있다. 

-vscode terminal에 python 파일명.py치면 코드결과값이 출력됨

-변수 = input() =>질문을 하는 함수!!
 ex) name = input("당신의 이름은?")
  결과: '당신의 이름은?' _
  입력: 효경
  name = '효경'
  ※input()함수는 숫자도 문자열로 처리..! 다 문자열! 즉, input함수로 문자열을 입력받아 변수에 저장 할 수 있다..!
  이렇게 만든 변수 활용하기!
  ex) print('너의 이름은'+name+'이구나~')
  ->더 편리하게...
     print(f'너의 이름은 {name}이구나~~') 즉, f문자열을 사용해서 문자열 안에서 변수를 바로바로 사용할 수 있다...!

-문자열의 사칙연산
	1.'문자열' + '문자열'
	2.'문자열' * 숫자
-자료형 변환
 ex) year = input('몇 년생인가요?')//input 사용했으니까 입력값은 숫자여도 문자열로 인식!!
    입력 : 1997
    year = '1997'
    age = 2019 - year + 1 (error! 숫자와 문자열간 사칙연산 불가)//input입력값은 문자열이니까
   따라서...age = 2019 - int(year)[or int('1995')] +1  (자료형 변환해주어야함,,,!) 

-함수 : 관련있는 행동들을 묶어서  '처리'하는 것
	입력 => 함수 => 출력

	만드는 방법
	def 함수이름 (인자 = 데이터를 넘겨받을 변수이름 & 여러개 사용 가능):    //()는 함수를 의미, print나 input도 다 함수였음.
	---->반드시 4칸 띄어쓰기를 해야함..!! 그래야 실행 가능!
		return (돌려줄 데이터가 있을 때)

	함수를 실행하는것 = 함수이름 (): = 함수를 호출한다 = call function
 
-자료형 중 숫자!
	-정수(int)
	-실수(float) : 정수와 실수 모두 float실수로 형변환이 가능하지만 정수의 경우 끝에 .0이 붙는다는점! (왜냐하면 실수를 정수로 바꾸는것과 다르게 데이터상 손실이 없기때문에)
	-사칙연산 : // 몫만 구할 때, % 나머지만 구할 때, / 몫을 소수점 자리까지 구할 때, 밑 ** 지수 

	-숫자 형 변환 : 문자열과 숫자 사이
	 ex) int("100"), float("12.3")

-자료형 중 문자!	
	-escape sequence : 문자열 내에서 특별한 기능을 하는 일련의 문자열 
	ex) \\ ->\
 	    \' ->'
  	   \" ->"
   	  \n ->줄 바꿈

	 -> ex) hello
    	      world 출력하는 방법
		print("hello\n world") or
		print("""hello
		world""") =>내가 쓰는대로 나오는 듯
	문자열은 ' 와 " 구분 하지 않음, 다 같은 출력문 내놓음.
	
	-문자열로 할 수 있는 것

	 "나는 효경이야"
	Q총 몇글자에요?? : len("나는 효경이야")
	Q앞에서 2번째 글자는 뭐에요?? : munjang[1] //0에서부터 index가 시작하니까
	Q그럼 뒤에서 3번째는?? : munjang[-3]
	Q7번째에서 10번째 글자만 뽑아낼 수는 없나요?? : munjang[6:10] //6이상 10미만
	Q문자열 안에 '효경'이라는 단어가 있나요?? : munjang.find("효경")
	Q문자열을 여러 개로 쪼갤 수는 없나요?? : munjang.split(" ")
	Q그 쪼갠걸 다시 붙일 수는 없나요?? : " ".join(["나는", "효경이야"])
	.
	.
	.
	.

	-문자열 형변환
	 ex)str(12.3), str(모든 값)..그냥 양쪽에 ""따옴표만 붙이면 다 문자열 됨.
 
-주석 : 코드의 설명 
	한 줄 주석 = #
	여러줄 주석 = """ 이 안에 설명 적기  """

  **단축키 :  ctrl + / = 주석 처리 및 해제

-리스트List
1.리스트 내 각각의 아이템에 접근하기
2. 아이템 추가/ 수정/ 삭제하기
3.리스트의 일부를 추출해 새로운 리스트로 만들기
4.리스트와 다른 리스트를 합쳐 더 큰 리스트 만들기
5.리스트 순서 정렬하기 ..((이정도는 알아야함.

-접근의 기준, 인덱스 index

ex)내 친구들
유정, 현주, 수연, 연수

my_friends = ["유정", "현주", "수연", "연수"]

l.리스트의 마지막 인덱스를 구하기
  ->보통 다른 프로그램의 경우...
  1.리스트의 길이를 구한다. 
  2. 그 길이에서 1을 뺀 것이 마지막 인덱스이다.

  ->파이썬의 경우
   처음에서 인덱스를 하나 더 빼면 마지막으로 가면서 인덱스가 -1이 됨.
   즉, 유정 인덱스 [0] 에서 하나를 더 빼면 연수 인덱스 [-1]로 가면서 마지막으로 돌아감
   따라서 파이썬에서 인덱스 -1은 마지막 인덱스를 의미

"유정, 안녕?" : print(f"{my_firends[0]}, 안녕?") //0번째 인덱스
"현주, 안녕?" : print(f"{my_firends[1]}, 안녕?") //왜 여기에다가 적었는지 모르겠네;;

ll.요소(element)추가하기

 my_friends.append("진우") ->리스트 맨 오른쪽에 추가됨..!
my_friends = ["유정", "현주", "수연", "연수", "진우"]

 my_friends.insert(1, "윤교") ->원하는 인덱스에 추가됨..!
my_friends = ["유정", "윤교", "현주", "수연", "연수", "진우"]

lll.요소 수정하기

 my_friend[1] = "진경" ->원하는 인덱스의 값이 대체됨.
my_friends = ["유정", "진경", "현주", "수연", "연수", "진우"]

lV.요소 삭제하기

del(my_friends[1]) 
my_friends = ["유정", "현주", "수연", "연수", "진우"] 

V.요소 추출하기 = 슬라이싱  slicing

girls = my_friends[0:4] // 인덱스 0이상 4 미만
girls = ["유정", "현주", "수연", "연수"] 

Vl.리스트와 리스트를 더해서 더 큰 리스트 만들기(완전히 새롭게)

all = girls + my_friends
all =["유정", "현주", "수연", "연수", "유정", "현주", "수연", "연수", "진우"] 

Vl-l.리스트와 리스트를 더해서 더 큰 리스트 만들기(기존의 리스트에)

girls.extend(my_friends)
girls = ["유정", "현주", "수연", "연수", "유정", "현주", "수연", "연수", "진우"]

Vll.리스트 순서 정렬하기

girls.sort() : 기본적으로 오름차순 정렬

girls.sort() 한 다음에
girls.reverse() : 뒤집으면 ... 내림차순 정렬

↑이게 싫으면
girls.sort(reverse = True) 이렇게

//멋사 강의
템플릿 언어 : html상에서 python코드를 사용할 수 있음.
템플릿 변수
{{python_varivable}}
템플릿 필터
:템플릿 변수에 추가적인 속성 및 기능 제공
{{python_variable | length or lower...}}
템플릿 태그
:html상에서 파이썬 문법 사용, url생성 등의 기능 제공
{% tag %} ....태그내용... {% endtag %}   끝나는 태그 필수!!
ex)
	number of students = {{ class | length }}//별개인듯
	{% for students in class %}
	
	  {{ students }}
	
	{% endfor %}  //python상의 for문을 html상에 나타낸 것으로 
			for문을 돌려서 class의 내용을 students에 담은뒤
			students를출력하라는 뜻.

ex)
	{% if score>80 %}
	  A+ 
	{% elif score>60 %}
	  B+ 
	{% elif score>40 %}
	  C+ 
	{% else %}
	  F
	{% endif %}
